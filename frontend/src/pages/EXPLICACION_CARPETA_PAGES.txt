# CARPETA PAGES - FUNCIONES Y ARCHIVOS

## ¿QUÉ ES ESTA CARPETA?
La carpeta `pages/` contiene todas las páginas principales de la aplicación. Cada archivo representa una ruta/página específica del sistema.

## ARCHIVOS Y SUS FUNCIONES:

### Login.tsx
- **Función**: Página de inicio de sesión
- **Qué hace**: 
  - Renderiza el formulario de login (usuario/contraseña)
  - Maneja la validación de formularios
  - Procesa el inicio de sesión
  - Redirige al dashboard si el login es exitoso
  - Muestra errores de autenticación
- **Ruta**: `/login`
- **Estado**: ✅ COMPLETADO

### Dashboard.tsx
- **Función**: Página principal del dashboard
- **Qué hace**: 
  - Muestra la página de inicio después del login
  - Contiene widgets principales o resumen
  - Es la página por defecto después de autenticarse
- **Ruta**: `/dashboard`
- **Estado**: ✅ COMPLETADO

### Tortas.tsx
- **Función**: Página de gestión de tortas
- **Qué hace**: 
  - Muestra la lista de todas las tortas
  - Permite ver detalles de cada torta
  - Punto de entrada para el drill-down hacia medidas
- **Ruta**: `/tortas`
- **API**: `getTortas()` desde api/tortas.ts
- **Estado**: 🔄 EN DESARROLLO

### Medidas.tsx
- **Función**: Página de gestión de medidas
- **Qué hace**: 
  - Muestra lista de medidas
  - Permite filtrar medidas por torta
  - Punto intermedio del drill-down (Tortas → Medidas → Detalle)
- **Ruta**: `/medidas`
- **API**: `getMedidas()` desde api/medidas.ts
- **Estado**: 🔄 EN DESARROLLO

### MedidaDetalle.tsx
- **Función**: Página de detalle de una medida específica
- **Qué hace**: 
  - Muestra información completa de una medida
  - Incluye ingredientes, costos, precios
  - Última página del drill-down
- **Ruta**: `/medidas/:id`
- **API**: `getMedidaDetalle(id)` desde api/medidaDetalle.ts
- **Estado**: 🔄 EN DESARROLLO

### Ingredientes.tsx
- **Función**: Página de gestión de ingredientes
- **Qué hace**: 
  - Muestra lista de todos los ingredientes
  - Información de stock, precios, proveedores
  - Posibles indicadores visuales de stock
- **Ruta**: `/ingredientes`
- **API**: `getIngredientes()` desde api/ingredientes.ts
- **Estado**: 🔄 EN DESARROLLO

### CostosExtra.tsx
- **Función**: Página de gestión de costos extra
- **Qué hace**: 
  - Muestra lista de costos adicionales
  - Costos de mano de obra, servicios, etc.
- **Ruta**: `/costos-extra`
- **API**: `getCostosExtra()` desde api/costoExtra.ts
- **Estado**: 🔄 EN DESARROLLO

### Reportes.tsx
- **Función**: Página de reportes y análisis
- **Qué hace**: 
  - Reportes de ventas, ganancias, gastos
  - Análisis de ingredientes faltantes/sobrantes
  - Gráficos y estadísticas
- **Ruta**: `/reportes`
- **Estado**: 📋 PENDIENTE

### README.txt
- **Función**: Documentación de la carpeta

## PATRÓN DE NAVEGACIÓN (DRILL-DOWN):
```
Tortas (Lista) → Medidas (Filtrado por torta) → MedidaDetalle (Detalle completo)
```

## ESTRUCTURA TÍPICA DE UNA PÁGINA:
```typescript
export const PageName: React.FC = () => {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // Cargar datos de la API
  }, []);

  if (loading) return <LoadingSpinner />;

  return (
    <div>
      {/* Contenido de la página */}
    </div>
  );
};
```

## CÓMO SE USAN:
- Las páginas se configuran en las rutas del router
- Se envuelven con `ProtectedRoute` para requerir autenticación
- Se renderizan dentro del `DashboardLayout`

## ESTADO ACTUAL:
- ✅ **Login y Dashboard**: Funcionando completamente
- 🔄 **Páginas de datos**: En desarrollo (Tortas, Medidas, etc.)
- 📋 **Reportes**: Pendiente de implementar

## PRÓXIMOS PASOS:
1. Completar páginas de datos básicas
2. Implementar drill-down completo
3. Agregar indicadores visuales
4. Desarrollar página de reportes