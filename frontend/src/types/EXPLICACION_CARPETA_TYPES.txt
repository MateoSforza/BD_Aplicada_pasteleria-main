# CARPETA TYPES - FUNCIONES Y ARCHIVOS

## ¬øQU√â ES ESTA CARPETA?
La carpeta `types/` contiene todas las definiciones de tipos TypeScript que se usan en toda la aplicaci√≥n. Proporciona tipado fuerte y ayuda con el IntelliSense.

## ARCHIVOS Y SUS FUNCIONES:

### auth.ts
- **Funci√≥n**: Tipos relacionados con autenticaci√≥n
- **Tipos definidos**:
  ```typescript
  interface Usuario {
    id: number;
    nombreUsuario: string;
    // otros campos del usuario
  }

  interface LoginCredentials {
    username: string;
    password: string;
  }

  interface LoginResponse {
    message: string;
    success: boolean;
    user?: Usuario;
  }
  ```
- **Uso**: Login, registro, gesti√≥n de sesiones
- **Estado**: ‚úÖ COMPLETADO

### tortas.ts
- **Funci√≥n**: Tipos relacionados con tortas
- **Tipos definidos**:
  ```typescript
  interface Torta {
    id: number;
    nombre: string;
    descripcion?: string;
    medidas: Medida[];
  }
  ```
- **Uso**: P√°ginas de tortas, componentes relacionados
- **Estado**: üîÑ EN DESARROLLO

### medidas.ts
- **Funci√≥n**: Tipos relacionados con medidas
- **Tipos definidos**:
  ```typescript
  interface Medida {
    id: number;
    tortaId: number;
    tama√±o: string;
    precio: number;
    // otros campos
  }

  interface MedidaDetalle {
    id: number;
    medida: Medida;
    ingredientes: IngredienteMedida[];
    costosExtra: CostoExtraMedida[];
  }
  ```
- **Uso**: P√°ginas de medidas, drill-down, detalles
- **Estado**: üîÑ EN DESARROLLO

### ingredientes.ts
- **Funci√≥n**: Tipos relacionados con ingredientes
- **Tipos definidos**:
  ```typescript
  interface Ingrediente {
    id: number;
    nombre: string;
    precio: number;
    stock: number;
    unidadMedida: string;
    proveedor?: string;
  }

  interface IngredienteMedida {
    ingredienteId: number;
    ingrediente: Ingrediente;
    cantidad: number;
    costo: number;
  }
  ```
- **Uso**: Gesti√≥n de ingredientes, c√°lculos de costos
- **Estado**: üîÑ EN DESARROLLO

### costosExtra.ts
- **Funci√≥n**: Tipos relacionados con costos extra
- **Tipos definidos**:
  ```typescript
  interface CostoExtra {
    id: number;
    nombre: string;
    tipo: 'FIJO' | 'VARIABLE';
    valor: number;
  }

  interface CostoExtraMedida {
    costoExtraId: number;
    costoExtra: CostoExtra;
    valor: number;
  }
  ```
- **Uso**: Gesti√≥n de costos adicionales
- **Estado**: üîÑ EN DESARROLLO

### reportes.ts
- **Funci√≥n**: Tipos para reportes y an√°lisis
- **Tipos definidos**:
  ```typescript
  interface ReporteVentas {
    periodo: string;
    tortasMasVendidas: TortaVenta[];
    ingresoTotal: number;
  }

  interface ReporteIngredientes {
    ingrediente: Ingrediente;
    stockActual: number;
    stockMinimo: number;
    estado: 'SUFICIENTE' | 'BAJO' | 'CRITICO';
  }
  ```
- **Uso**: P√°ginas de reportes, an√°lisis
- **Estado**: üìã PENDIENTE

### api.ts
- **Funci√≥n**: Tipos para respuestas de API
- **Tipos definidos**:
  ```typescript
  interface ApiResponse<T> {
    data: T;
    success: boolean;
    message?: string;
  }

  interface ApiError {
    message: string;
    code: number;
    details?: any;
  }
  ```
- **Uso**: Tipado de respuestas HTTP
- **Estado**: üîÑ EN DESARROLLO

### common.ts
- **Funci√≥n**: Tipos comunes y utilitarios
- **Tipos definidos**:
  ```typescript
  interface PaginatedResponse<T> {
    items: T[];
    totalCount: number;
    pageSize: number;
    currentPage: number;
  }

  type LoadingState = 'idle' | 'loading' | 'success' | 'error';
  ```
- **Uso**: Tipos reutilizables en toda la app
- **Estado**: üîÑ EN DESARROLLO

## VENTAJAS DEL TIPADO FUERTE:
- **IntelliSense**: Autocompletado en el editor
- **Detecci√≥n de errores**: Errores en tiempo de compilaci√≥n
- **Refactoring seguro**: Cambios sin romper c√≥digo
- **Documentaci√≥n**: Los tipos documentan la estructura
- **Mantenibilidad**: C√≥digo m√°s predecible

## PATR√ìN DE NOMENCLATURA:
- **Interfaces**: PascalCase (ej: `Usuario`, `LoginResponse`)
- **Types**: PascalCase para aliases complejos
- **Enums**: UPPER_CASE para valores (ej: `ESTADO.ACTIVO`)

## C√ìMO SE USAN:
```typescript
import { Usuario, LoginCredentials } from '../types/auth';
import { Torta } from '../types/tortas';

// En funciones
const login = async (credentials: LoginCredentials): Promise<Usuario> => {
  // implementaci√≥n
};

// En componentes
interface Props {
  torta: Torta;
  onSelect: (id: number) => void;
}
```

## MEJORES PR√ÅCTICAS:
- Un archivo por dominio/entidad
- Interfaces para objetos, types para uniones
- Tipos espec√≠ficos mejor que `any`
- Reutilizar tipos comunes
- Mantener sincronizado con el backend

## ESTADO ACTUAL:
- ‚úÖ **auth.ts**: Completamente definido
- üîÑ **Tipos de entidades**: En desarrollo
- üìã **Tipos avanzados**: Pendientes (reportes, filtros)

## SINCRONIZACI√ìN CON BACKEND:
- Los tipos deben coincidir con los DTOs del backend
- Actualizar tipos cuando cambie la API
- Usar herramientas como OpenAPI para generar tipos autom√°ticamente