# CARPETA COMPONENTS - FUNCIONES Y ARCHIVOS

## ¿QUÉ ES ESTA CARPETA?
La carpeta `components/` contiene componentes React reutilizables que se usan en diferentes partes de la aplicación.

## ARCHIVOS Y SUS FUNCIONES:

### DashboardLayout.tsx
- **Función**: Layout principal del dashboard
- **Qué hace**: 
  - Renderiza la barra lateral con navegación
  - Muestra el área principal de contenido
  - Incluye el header con información del usuario
  - Maneja el logout
- **Props**: `children` (componentes que se renderizan en el área principal)
- **Hooks usados**: `useAuth` para obtener datos del usuario

### LoadingSpinner.tsx
- **Función**: Componente de loading/carga
- **Qué hace**: 
  - Muestra un spinner animado mientras cargan los datos
  - Proporciona feedback visual al usuario
- **Props**: `size` (opcional) para el tamaño del spinner
- **Uso**: Se muestra mientras se hacen peticiones a la API

### ProtectedRoute.tsx
- **Función**: Protege rutas que requieren autenticación
- **Qué hace**: 
  - Verifica si el usuario está autenticado
  - Redirige al login si no está autenticado
  - Permite acceso si está autenticado
- **Props**: `children` (componente a proteger)
- **Hooks usados**: `useAuth` para verificar estado de autenticación

### README.txt
- **Función**: Documentación de la carpeta
- **Contenido**: Explicación de qué son los componentes reutilizables

## PATRÓN DE DISEÑO:
- Componentes funcionales con hooks
- Props tipadas con TypeScript
- Componentes pequeños y enfocados en una responsabilidad
- Reutilizables en toda la aplicación

## ESTRUCTURA TÍPICA DE UN COMPONENTE:
```typescript
interface Props {
  // Props tipadas
}

export const ComponenteName: React.FC<Props> = ({ prop1, prop2 }) => {
  // Lógica del componente
  
  return (
    <div>
      {/* JSX del componente */}
    </div>
  );
};
```

## CÓMO SE USAN:
```typescript
import { DashboardLayout } from '../components/DashboardLayout';
import { LoadingSpinner } from '../components/LoadingSpinner';

// En otro componente
<DashboardLayout>
  <LoadingSpinner />
</DashboardLayout>
```

## BENEFICIOS:
- Reutilización de código
- Mantenimiento centralizado
- Consistencia en la UI
- Separación de responsabilidades
- Fácil testing

## TIPOS DE COMPONENTES:
- **Layout**: Estructuran la página (DashboardLayout)
- **UI**: Elementos de interfaz (LoadingSpinner)
- **Funcionales**: Lógica específica (ProtectedRoute)