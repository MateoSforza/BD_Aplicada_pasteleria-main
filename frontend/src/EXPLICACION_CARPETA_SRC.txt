# CARPETA SRC - FUNCIONES Y ARCHIVOS RAÍZ

## ¿QUÉ ES ESTA CARPETA?
La carpeta `src/` es la raíz del código fuente de la aplicación React. Contiene archivos de configuración principal y las subcarpetas organizadas por funcionalidad.

## ARCHIVOS PRINCIPALES:

### main.tsx
- **Función**: Punto de entrada de la aplicación React
- **Qué hace**: 
  - Renderiza la aplicación en el DOM
  - Configura el StrictMode de React
  - Punto de arranque de toda la aplicación
- **Importancia**: Sin este archivo, la aplicación no se ejecuta
- **Código típico**:
  ```typescript
  import React from 'react'
  import ReactDOM from 'react-dom/client'
  import App from './App.tsx'
  
  ReactDOM.createRoot(document.getElementById('root')!).render(
    <React.StrictMode>
      <App />
    </React.StrictMode>,
  )
  ```

### App.tsx
- **Función**: Componente raíz de la aplicación
- **Qué hace**: 
  - Define las rutas principales de la aplicación
  - Configura el router de React Router
  - Envuelve toda la aplicación con providers
  - Maneja la estructura general de navegación
- **Rutas configuradas**:
  - `/login` → Página de login
  - `/dashboard` → Dashboard principal
  - `/tortas` → Gestión de tortas
  - `/medidas` → Gestión de medidas
  - `/ingredientes` → Gestión de ingredientes
  - `/costos-extra` → Gestión de costos extra
  - `/reportes` → Reportes y análisis

### vite-env.d.ts
- **Función**: Definiciones de tipos para Vite
- **Qué hace**: 
  - Proporciona tipos TypeScript para las características de Vite
  - Habilita IntelliSense para imports de assets
  - Configura tipos para variables de entorno
- **Importancia**: Necesario para que TypeScript funcione con Vite

## SUBCARPETAS:

### 📁 api/
- **Propósito**: Comunicación con el backend
- **Contiene**: Funciones para peticiones HTTP
- **Archivos**: auth.ts, tortas.ts, medidas.ts, etc.

### 📁 components/
- **Propósito**: Componentes React reutilizables
- **Contiene**: UI components, layouts, elementos comunes
- **Archivos**: DashboardLayout.tsx, ProtectedRoute.tsx, etc.

### 📁 pages/
- **Propósito**: Páginas principales de la aplicación
- **Contiene**: Componentes que representan rutas completas
- **Archivos**: Login.tsx, Dashboard.tsx, Tortas.tsx, etc.

### 📁 hooks/
- **Propósito**: React hooks personalizados
- **Contiene**: Lógica reutilizable de estado y efectos
- **Archivos**: useAuth.ts, useApi.ts, useTortas.ts, etc.

### 📁 types/
- **Propósito**: Definiciones de tipos TypeScript
- **Contiene**: Interfaces y tipos para toda la aplicación
- **Archivos**: auth.ts, tortas.ts, medidas.ts, etc.

## FLUJO DE LA APLICACIÓN:

1. **main.tsx** → Arranca la aplicación
2. **App.tsx** → Configura rutas y estructura general
3. **pages/** → Cada ruta renderiza una página específica
4. **components/** → Las páginas usan componentes reutilizables
5. **hooks/** → Los componentes usan hooks para lógica
6. **api/** → Los hooks llaman funciones de API
7. **types/** → Todo está tipado con TypeScript

## ARQUITECTURA:
```
main.tsx
  └── App.tsx (Router)
      ├── Login.tsx
      └── ProtectedRoute
          └── DashboardLayout
              ├── Dashboard.tsx
              ├── Tortas.tsx
              ├── Medidas.tsx
              └── ...
```

## CONFIGURACIÓN DE RUTAS:
- **Públicas**: `/login` (sin autenticación)
- **Protegidas**: Todas las demás (requieren login)
- **Layout**: Rutas protegidas usan `DashboardLayout`

## ESTADO ACTUAL:
- ✅ **Estructura básica**: Configurada y funcionando
- ✅ **Autenticación**: Sistema completo implementado
- 🔄 **Páginas de datos**: En desarrollo
- 📋 **Funcionalidades avanzadas**: Pendientes

## PRÓXIMOS PASOS:
1. Completar páginas de entidades (Tortas, Medidas, etc.)
2. Implementar drill-down navigation
3. Agregar indicadores visuales
4. Desarrollar sistema de reportes

## CONVENCIONES:
- Archivos de componentes: PascalCase.tsx
- Archivos de hooks: camelCase.ts (con prefijo 'use')
- Archivos de tipos: camelCase.ts
- Archivos de API: camelCase.ts
- Imports relativos para archivos del proyecto
- Imports absolutos para librerías externas