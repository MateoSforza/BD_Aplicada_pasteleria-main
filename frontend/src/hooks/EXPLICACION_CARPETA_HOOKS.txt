# CARPETA HOOKS - FUNCIONES Y ARCHIVOS

## ¬øQU√â ES ESTA CARPETA?
La carpeta `hooks/` contiene React hooks personalizados que encapsulan l√≥gica reutilizable para el manejo de estado y efectos.

## ARCHIVOS Y SUS FUNCIONES:

### useAuth.ts
- **Funci√≥n**: Hook para manejo de autenticaci√≥n
- **Qu√© hace**: 
  - Gestiona el estado de autenticaci√≥n del usuario
  - Proporciona funciones para login y logout
  - Mantiene la sesi√≥n en localStorage
  - Verifica si el usuario est√° autenticado
- **Funciones exportadas**:
  - `login(credentials)`: Inicia sesi√≥n
  - `logout()`: Cierra sesi√≥n
  - `isAuthenticated()`: Verifica si est√° autenticado
  - `user`: Objeto del usuario actual
  - `loading`: Estado de carga
  - `error`: Errores de autenticaci√≥n

### useApi.ts
- **Funci√≥n**: Hook gen√©rico para peticiones a la API
- **Qu√© hace**: 
  - Maneja estados de loading, error y datos
  - Proporciona funci√≥n para recargar datos
  - Gestiona el ciclo de vida de peticiones HTTP
- **Funciones exportadas**:
  - `data`: Datos obtenidos de la API
  - `loading`: Estado de carga
  - `error`: Error si ocurre
  - `refetch()`: Funci√≥n para recargar datos

### useTortas.ts
- **Funci√≥n**: Hook espec√≠fico para datos de tortas
- **Qu√© hace**: 
  - Usa `useApi` internamente
  - Carga datos de tortas desde la API
  - Proporciona estado espec√≠fico para tortas
- **Funciones exportadas**:
  - `tortas`: Array de tortas
  - `loading`: Estado de carga
  - `error`: Error si ocurre
  - `refetchTortas()`: Recargar tortas

### useMedidas.ts
- **Funci√≥n**: Hook espec√≠fico para datos de medidas
- **Qu√© hace**: 
  - Carga datos de medidas desde la API
  - Permite filtrar medidas por torta
  - Maneja estado espec√≠fico de medidas
- **Funciones exportadas**:
  - `medidas`: Array de medidas
  - `loading`: Estado de carga
  - `error`: Error si ocurre
  - `getMedidasByTorta(tortaId)`: Filtrar por torta

### useIngredientes.ts
- **Funci√≥n**: Hook espec√≠fico para datos de ingredientes
- **Qu√© hace**: 
  - Carga datos de ingredientes desde la API
  - Maneja estado espec√≠fico de ingredientes
- **Funciones exportadas**:
  - `ingredientes`: Array de ingredientes
  - `loading`: Estado de carga
  - `error`: Error si ocurre

### useCostosExtra.ts
- **Funci√≥n**: Hook espec√≠fico para datos de costos extra
- **Qu√© hace**: 
  - Carga datos de costos extra desde la API
  - Maneja estado espec√≠fico de costos extra
- **Funciones exportadas**:
  - `costosExtra`: Array de costos extra
  - `loading`: Estado de carga
  - `error`: Error si ocurre

## PATR√ìN DE DISE√ëO:
- Hooks personalizados siguen el patr√≥n `use...`
- Encapsulan l√≥gica compleja y la hacen reutilizable
- Manejan estados comunes: data, loading, error
- Abstraen las llamadas a la API

## ESTRUCTURA T√çPICA DE UN HOOK:
```typescript
export const useData = () => {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    // L√≥gica para cargar datos
  }, []);

  return { data, loading, error, refetch };
};
```

## C√ìMO SE USAN:
```typescript
import { useAuth } from '../hooks/useAuth';
import { useTortas } from '../hooks/useTortas';

// En un componente
const { user, login, logout } = useAuth();
const { tortas, loading, error } = useTortas();
```

## BENEFICIOS:
- **Reutilizaci√≥n**: L√≥gica compartida entre componentes
- **Separaci√≥n**: L√≥gica separada de la presentaci√≥n
- **Testing**: F√°cil de testear de forma aislada
- **Mantenimiento**: Cambios centralizados
- **Legibilidad**: Componentes m√°s limpios

## HOOKS DE REACT USADOS:
- `useState`: Manejo de estado local
- `useEffect`: Efectos secundarios
- `useCallback`: Memoizaci√≥n de funciones
- `useMemo`: Memoizaci√≥n de valores

## ESTADO ACTUAL:
- ‚úÖ **useAuth**: Completamente funcional
- üîÑ **useApi y hooks espec√≠ficos**: En desarrollo
- üìã **Hooks avanzados**: Pendientes (filtros, b√∫squeda, paginaci√≥n)