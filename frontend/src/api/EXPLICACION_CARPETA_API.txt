# CARPETA API - FUNCIONES Y ARCHIVOS

## ¿QUÉ ES ESTA CARPETA?
La carpeta `api/` contiene todas las funciones que se comunican con el backend. Es la capa de comunicación entre el frontend y la API del servidor.

## ARCHIVOS Y SUS FUNCIONES:

### api.ts
- **Función**: Archivo principal que exporta la instancia de axios configurada
- **Qué hace**: Configura la URL base del backend y headers por defecto
- **Importancia**: Todas las demás funciones de API lo usan como base

### auth.ts
- **Función**: Maneja la autenticación de usuarios
- **Qué hace**: 
  - `login()`: Envía credenciales al backend para iniciar sesión
  - `logout()`: Limpia los datos de sesión del localStorage
- **Endpoint**: POST /api/LogIn

### costoExtra.ts
- **Función**: Maneja los datos de costos extra
- **Qué hace**: `getCostosExtra()` - Obtiene la lista de todos los costos extra
- **Endpoint**: GET /api/CostosExtra

### http.ts
- **Función**: Configuración base de axios
- **Qué hace**: 
  - Configura la URL base desde las variables de entorno (.env)
  - Establece headers por defecto
  - Maneja interceptors si es necesario

### ingredientes.ts
- **Función**: Maneja los datos de ingredientes
- **Qué hace**: `getIngredientes()` - Obtiene la lista de todos los ingredientes
- **Endpoint**: GET /api/Ingredientes

### medidaDetalle.ts
- **Función**: Maneja el detalle de medidas específicas
- **Qué hace**: `getMedidaDetalle(id)` - Obtiene el detalle completo de una medida
- **Endpoint**: GET /api/Tortas/medidas/{medidaId}

### medidas.ts
- **Función**: Maneja los datos de medidas
- **Qué hace**: `getMedidas()` - Obtiene la lista de todas las medidas
- **Endpoint**: GET /api/Medidas

### tortas.ts
- **Función**: Maneja los datos de tortas
- **Qué hace**: `getTortas()` - Obtiene la lista de todas las tortas con sus medidas
- **Endpoint**: GET /api/Tortas

### README.txt
- **Función**: Documentación de la carpeta (si existe)

## PATRÓN DE DISEÑO:
- Cada archivo corresponde a una entidad del sistema
- Todas las funciones son asíncronas (async/await)
- Retornan Promises tipadas con TypeScript
- Usan la instancia de axios configurada en http.ts

## CÓMO SE USA:
```typescript
import { getTortas } from '../api/tortas';

// En un componente o hook
const tortas = await getTortas();
```

## BENEFICIOS:
- Separación clara de responsabilidades
- Fácil mantenimiento
- Reutilización de código
- Tipado fuerte con TypeScript
- Configuración centralizada